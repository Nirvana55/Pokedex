{"version":3,"sources":["..\\sass\\helpers\\_color.scss","..\\sass\\components\\_basic.scss","..\\sass\\components\\_music.scss","..\\sass\\helpers\\_fonts.scss","..\\sass\\layouts\\_header.scss","..\\sass\\helpers\\_breakpoints.scss","..\\sass\\layouts\\_pokemonCard.scss","..\\sass\\layouts\\_nocard.scss"],"names":[],"mappings":"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","file":"style.28097f41.css","sourceRoot":"..\\html","sourcesContent":["html {\r\n  --blueGradient: linear-gradient(120deg, #a1c4fd 10%, #a1c4fd 100%);\r\n  --pokemonBlue: #3d7dca;\r\n  --pokemonYellow: #f8c703;\r\n  --btnhover: #c9b04d;\r\n  --btnhoverColor: #0049a8;\r\n}\r\n","*,\r\n::before,\r\n::after {\r\n  box-sizing: border-box;\r\n  text-decoration: none;\r\n  list-style-type: none;\r\n}\r\n\r\nbody {\r\n  padding: 0;\r\n  margin: 0;\r\n  background-image: var(--blueGradient);\r\n}\r\n\r\n.container {\r\n  max-width: 1200px;\r\n  width: 80%;\r\n  margin: 0 auto;\r\n}\r\n","// Music Btn\r\n.music {\r\n  position: absolute;\r\n  top: 2%;\r\n  right: 1.5%;\r\n  #music__Btn {\r\n    background-color: #fdcb00;\r\n\r\n    font-weight: 500;\r\n    border-radius: 5px;\r\n    font-family: $poppins;\r\n\r\n    border: 1px solid var(--pokemonYellow);\r\n\r\n    cursor: pointer;\r\n\r\n    i {\r\n      color: rgb(134, 89, 5);\r\n    }\r\n    &:hover {\r\n      transform: scale(1.1);\r\n    }\r\n  }\r\n}\r\n","// @font-face {\r\n//   font-family: \"pokemon_hollownormal\";\r\n//   src: url(\"fonts/pokemonhollow-webfont.woff2\") format(\"woff2\"),\r\n//     url(\"fonts/pokemonhollow-webfont.woff\") format(\"woff\");\r\n//   font-weight: normal;\r\n//   font-style: normal;\r\n// }\r\n\r\n// @font-face {\r\n//   font-family: \"pokemon_solidnormal\";\r\n//   src: url(\"fonts/pokemonsolid-webfont.woff2\") format(\"woff2\"),\r\n//     url(\"fonts/pokemonsolid-webfont.woff\") format(\"woff\");\r\n//   font-weight: normal;\r\n//   font-style: normal;\r\n// }\r\n\r\n$pokemonHollow: pokemon_hollownormal;\r\n$pokemonSolid: pokemon_solidnormal;\r\n$poppins: \"Poppins\", sans-serif;\r\n","//headers\r\n#header {\r\n  margin-top: 4.5rem;\r\n  text-align: center;\r\n  .container {\r\n    img {\r\n      width: 90%;\r\n      transform: scale(1.2);\r\n      transition: 0.5s;\r\n      @include media(\"<=phone\") {\r\n        width: 100%;\r\n        transform: scale(1.2);\r\n      }\r\n\r\n      @include media(\">=tablet\") {\r\n        width: 80%;\r\n      }\r\n\r\n      @include media(\">=desktop\") {\r\n        width: 70%;\r\n        transform: none;\r\n      }\r\n    }\r\n    #form {\r\n      position: relative;\r\n      top: 50px;\r\n      align-items: center;\r\n      #inputPokemon {\r\n        width: 85%;\r\n        height: 40px;\r\n\r\n        border-radius: 5px;\r\n        border: 1px solid var(--pokemonBlue);\r\n\r\n        padding: 10px;\r\n\r\n        outline: none;\r\n\r\n        font-family: $poppins;\r\n        color: grey;\r\n\r\n        @include media(\">=tablet\") {\r\n          width: 70%;\r\n          margin-left: 2.5rem;\r\n\r\n          height: 43px;\r\n        }\r\n\r\n        @include media(\">=desktop\") {\r\n          width: 55%;\r\n        }\r\n        &::placeholder {\r\n          font-size: 14px;\r\n        }\r\n        &:focus {\r\n          border: 2px solid var(--pokemonBlue);\r\n          box-shadow: 0px 0px 2px 1px var(--pokemonBlue);\r\n        }\r\n      }\r\n    }\r\n\r\n    #form:focus + .btnSearch {\r\n      border: 1px solid var(--pokemonBlue);\r\n    }\r\n\r\n    .btnSearch {\r\n      position: absolute;\r\n      height: 35px;\r\n      width: 40px;\r\n      font-size: 16px;\r\n      right: 8.5%;\r\n      top: 3%;\r\n\r\n      border-radius: 4px;\r\n      background: var(--pokemonYellow);\r\n      box-shadow: inset 1px 1px grey;\r\n      border: 1px solid white;\r\n\r\n      border-left: none;\r\n      border-right: none;\r\n\r\n      color: var(--pokemonBlue);\r\n\r\n      cursor: pointer;\r\n\r\n      padding: 6px;\r\n\r\n      @include media(\">=tablet\") {\r\n        height: 39px;\r\n        right: 12.3%;\r\n      }\r\n      @include media(\">=desktop\") {\r\n        right: 21%;\r\n      }\r\n\r\n      &:hover {\r\n        background-color: var(--btnhover);\r\n        color: var(--btnhoverColor);\r\n      }\r\n\r\n      img {\r\n        width: 19px;\r\n\r\n        @include media(\">=tablet\") {\r\n          width: 25px;\r\n        }\r\n      }\r\n    }\r\n    #span {\r\n      font-family: $poppins;\r\n      font-size: 12px;\r\n      margin-top: 4rem;\r\n\r\n      color: rgb(134, 89, 5);\r\n    }\r\n  }\r\n}\r\n","@charset \"UTF-8\";\r\n/// Creates a list of global breakpoints\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n$breakpoints: (\r\n  \"phone\": 380px,\r\n  \"tablet\": 768px,\r\n  \"desktop\": 1024px,\r\n  \"lgdesktop\": 1920px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  \"screen\": \"screen\",\r\n  \"print\": \"print\",\r\n  \"handheld\": \"handheld\",\r\n  \"landscape\": \"(orientation: landscape)\",\r\n  \"portrait\": \"(orientation: portrait)\",\r\n  \"retina2x\":\r\n    \"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\r\n  \"retina3x\":\r\n    \"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  \"px\": 1,\r\n  \"em\": 0.01,\r\n  \"rem\": 0.1,\r\n  \"\": 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: \"desktop\" !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists(\"at-error\") {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {\r\n  }\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\r\n    }\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\r\n        ($prefix == \"min\" and $value > $no-media-breakpoint-value)\r\n      {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log(\"No operator found in `#{$expression}`.\");\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: \"width\";\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log(\"Unknown unit `#{unit($value)}`.\");\r\n  }\r\n\r\n  @if $operator == \">\" {\r\n    $value: $value + $interval;\r\n  } @else if $operator == \"<\" {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return \"(#{$prefix}-#{$dimension}: #{$value})\";\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == \"number\" {\r\n    @return $value;\r\n  } @else if type-of($value) != \"string\" {\r\n    $_: im-log(\"Value for `to-number` should be a number or a string.\");\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == \"-\");\r\n  $numbers: (\r\n    \"0\": 0,\r\n    \"1\": 1,\r\n    \"2\": 2,\r\n    \"3\": 3,\r\n    \"4\": 4,\r\n    \"5\": 5,\r\n    \"6\": 6,\r\n    \"7\": 7,\r\n    \"8\": 8,\r\n    \"9\": 9,\r\n  );\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == \"+\" or $first-character == \"-\") {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not(index(map-keys($numbers), $character) or $character == \".\") {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n    }\r\n\r\n    @if $character == \".\" {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: (\r\n    \"px\": 1px,\r\n    \"cm\": 1cm,\r\n    \"mm\": 1mm,\r\n    \"%\": 1%,\r\n    \"ch\": 1ch,\r\n    \"pc\": 1pc,\r\n    \"in\": 1in,\r\n    \"em\": 1em,\r\n    \"rem\": 1rem,\r\n    \"pt\": 1pt,\r\n    \"ex\": 1ex,\r\n    \"vw\": 1vw,\r\n    \"vh\": 1vh,\r\n    \"vmin\": 1vmin,\r\n    \"vmax\": 1vmax,\r\n  );\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log(\"Invalid unit `#{$unit}`.\");\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge(\r\n    $media-expressions,\r\n    $tweak-media-expressions\r\n  ) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n  {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Pokemon Card\r\n.grid {\r\n  display: grid;\r\n\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-gap: 2em;\r\n\r\n  font-family: $poppins;\r\n\r\n  border-radius: 5px;\r\n\r\n  margin: 6rem auto 0rem auto;\r\n\r\n  width: 50%;\r\n\r\n  @include media(\"<=phone\") {\r\n    width: 60%;\r\n  }\r\n\r\n  @include media(\">=tablet\") {\r\n    width: 30%;\r\n  }\r\n\r\n  @include media(\">=desktop\") {\r\n    width: 80%;\r\n  }\r\n\r\n  .pokemonDiv {\r\n    display: grid;\r\n    place-items: center;\r\n\r\n    background-color: #defde0;\r\n    border-radius: 10px;\r\n\r\n    padding: 20px;\r\n\r\n    width: 100%;\r\n    height: 280px;\r\n\r\n    @include media(\">=tablet\") {\r\n      height: 300px;\r\n    }\r\n\r\n    .img__Container {\r\n      background-color: white;\r\n      border-radius: 50%;\r\n\r\n      height: 130px;\r\n      width: 130px;\r\n\r\n      text-align: center;\r\n\r\n      img {\r\n        margin-top: 25px;\r\n\r\n        max-width: 85%;\r\n\r\n        @include media(\">=tablet\") {\r\n          max-width: 90%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","//no card\r\n.noCardFound {\r\n  width: 250px;\r\n  padding: 0.1em;\r\n\r\n  border-radius: 5px;\r\n  background: var(--pokemonYellow);\r\n\r\n  text-align: center;\r\n\r\n  @include media(\"<tablet\") {\r\n    width: 210px;\r\n    padding: 0em;\r\n  }\r\n  .noCard__Container {\r\n    width: 100%;\r\n\r\n    color: var(--btnhoverColor);\r\n\r\n    font-size: 14px;\r\n\r\n    @include media(\"<tablet\") {\r\n      font-size: 13px;\r\n    }\r\n  }\r\n}\r\n"]}